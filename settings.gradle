rootProject.name = 'spring-datasource-migration'
include 'instance'
include 'deployment'

enableFeaturePreview('VERSION_CATALOGS')
dependencyResolutionManagement {
    versionCatalogs {
        libs {
            version('spring-version', '5.3.12')
            version('springboot-version', '2.5.6')
            alias('spring-core').to('org.springframework', 'spring-core').versionRef('spring-version')
            alias('spring-context').to('org.springframework', 'spring-context').versionRef('spring-version')
            alias('springboot-autoconfigure').to('org.springframework.boot', 'spring-boot-autoconfigure').versionRef('springboot-version')
            alias('springboot-actuator').to('org.springframework.boot', 'spring-boot-starter-actuator').versionRef('springboot-version')
            alias('springboot-log4j2').to('org.springframework.boot', 'spring-boot-starter-log4j2').versionRef('springboot-version')
            alias('springboot-web').to('org.springframework.boot', 'spring-boot-starter-web').versionRef('springboot-version')
            bundle('springboot', ['spring-core', 'spring-context', 'springboot-autoconfigure', 'springboot-actuator', 'springboot-log4j2', 'springboot-web'])

            version('postgresql-version', '42.3.1')
            version('mybatis-version', '3.5.7')
            version('mybatis-spring-version', '2.0.6')
            version('mybatis-spring-starter-version', '2.2.0')
            alias('postgresql-driver').to('org.postgresql', 'postgresql').versionRef('postgresql-version')
            alias('mybatis-core').to('org.mybatis', 'mybatis').versionRef('mybatis-version')
            alias('mybatis-spring').to('org.mybatis', 'mybatis-spring').versionRef('mybatis-spring-version')
            alias('mybatis-starter').to('org.mybatis.spring.boot', 'mybatis-spring-boot-starter').versionRef('mybatis-spring-starter-version')
            bundle('postgresql', ['postgresql-driver', 'mybatis-core', 'mybatis-spring', 'mybatis-starter'])
        }
    }
}
